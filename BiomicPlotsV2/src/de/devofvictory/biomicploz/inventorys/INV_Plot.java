package de.devofvictory.biomicploz.inventorys;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.OfflinePlayer;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import de.devofvictory.biomicploz.commands.Command_Build;
import de.devofvictory.biomicploz.main.Main;
import de.devofvictory.biomicploz.utils.AnvilGUI;
import de.devofvictory.biomicploz.utils.AnvilGUI.AnvilClickEvent;
import de.devofvictory.biomicploz.utils.AnvilGUI.AnvilClickEventHandler;
import de.devofvictory.biomicploz.utils.AnvilGUI.AnvilSlot;
import de.devofvictory.biomicploz.utils.Plot;
import de.devofvictory.biomicploz.utils.PlotManager;
import de.devofvictory.biomicploz.utils.Utils;

public class INV_Plot implements Listener{
	
	/*
	 * 
	 * Code generated by McGUI-Creator
	 * 	
	 * @author: DevOFVictory
	 * 
	 * » Remember to register this Class as listener in the onEnable() method!
	 * 
	 */
	static String invName;
	static int lines = 3;
	static ArrayList<ItemStack> items = new ArrayList<>();
	
	public static void callInv(Player p, int id, String number) {
	
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)15, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)6, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)7, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)7, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)7, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)7, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)7, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)6, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)15, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)6, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.REDSTONE_COMPARATOR, (byte)0, 1, "§6Einstellungen", (List<String>) Arrays.asList("§aÄndere Einstellungen von deinem Grundstück!")));
items.add(null);
items.add(getItemStack(Material.ENDER_PEARL, (byte)0, 1, "§6Teleportieren", (List<String>) Arrays.asList("§aTeleportiere dich zu diesem Grundstück")));
items.add(null);
items.add(getItemStack(Material.NAME_TAG, (byte)0, 1, "§6Überschreiben", (List<String>) Arrays.asList("§aSetze den Besitzer des Grundstückes neu!")));
items.add(null);
items.add(getItemStack(Material.COAL, (byte)0, 1, "§6Verkaufen", (List<String>) Arrays.asList("§aVerkaufe das Grundstück an die Bank!")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)6, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)15, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)6, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)7, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)7, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)7, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)7, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)7, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)6, 1, "§r", (List<String>) Arrays.asList("")));
items.add(getItemStack(Material.STAINED_GLASS_PANE, (byte)15, 1, "§r", (List<String>) Arrays.asList("")));


		invName = "§e§lMein "+number+". Grundstück §8ID: "+id;

		Inventory inv = Bukkit.createInventory(null, lines*9, invName);
		
		for (int i = 0; i<lines*9; i++) {
			
			try {
			
			@SuppressWarnings("deprecation")
			ItemStack item = new ItemStack(items.get(i).getType(), items.get(i).getAmount(), items.get(i).getData().getData());
			ItemMeta itemMeta = item.getItemMeta();
			itemMeta.setDisplayName(items.get(i).getItemMeta().getDisplayName());
			itemMeta.setLore(items.get(i).getItemMeta().getLore());
			item.setItemMeta(itemMeta);
			inv.setItem(i, item);
			
			}catch (NullPointerException ex) {
				inv.setItem(i, null);
			}
			
		}
		
		p.openInventory(inv);	
	}
	
	@EventHandler
	public void onInvClick(InventoryClickEvent e) {
		if (e.getWhoClicked() instanceof Player) {
			Player p = (Player)e.getWhoClicked();
			try {
				if (e.getClickedInventory().getName().startsWith("§e§lMein ")) {
					
					if (items.contains(e.getCurrentItem())) {
						e.setCancelled(true);
						String clickedItem = e.getCurrentItem().getItemMeta().getDisplayName();
						
						String invTitle = e.getClickedInventory().getTitle();
						String a = invTitle.split(". Grundstück §8ID: ")[1];
						int id = Integer.parseInt(a);
						
						Plot plot = PlotManager.getPlot(id);
						
						switch (clickedItem) {
						case "§6Teleportieren":
							
							p.closeInventory();
							p.teleport(plot.getHome());
							Utils.sendNoSpamMsg(p, Main.Prefix+"§aDu wurdest zu deinem Grundstück teleportiert!");
							p.playSound(p.getLocation(), Sound.ENDERMAN_TELEPORT, 1, 1);
							
							break;
						case "§6Einstellungen":
							INV_PlotSettings.callInv(p, id);
							break;
						case "§6Verkaufen":
							
							if (plot != null) {
								
								if (plot.getOwner().equals(p.getUniqueId())) {
									
									plot.sell();
								}
							}
							break;
						case "§6Überschreiben":
							
							AnvilGUI gui = new AnvilGUI(p, new AnvilClickEventHandler() {
								
								@SuppressWarnings("deprecation")
								@Override
								public void onAnvilClick(AnvilClickEvent e) {
									if (e.getSlot() == AnvilSlot.OUTPUT) {
										String playerName = e.getOutPutMessage().replaceAll("Name » ", "");
										
										e.setWillClose(true);
										e.setWillDestroy(true);
										
										if (plot.getOwner().equals(p.getUniqueId()) && !Command_Build.powermode.contains(p)) {
											
											OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);
											
											if (target.hasPlayedBefore()) {
												
												p.performCommand("gs setowner "+target.getName());
												
											}else {
												Utils.sendNoSpamMsg(p, Main.Prefix+"§c"+playerName+" war noch nie online!");
											}
											
										
										}else {
											Utils.sendNoSpamMsg(p, Main.Prefix+"§cDas Plot mit der ID §e"+plot.getID()+" §cgehört nicht dir!");
										}
										
									}else {
										e.setWillClose(false);
										e.setWillDestroy(false);
									}
									
									
								}
							});
							
							
							ItemStack input = new ItemStack(Material.PAPER);
							ItemMeta inputMeta = input.getItemMeta();
							inputMeta.setDisplayName("Name » ");
							input.setItemMeta(inputMeta);
							
							
							gui.setSlot(AnvilSlot.INPUT_LEFT, input);
							gui.open();

							break;
						case "e":
							/*Code here*/		
							break;
						case "f":
							/*Code here*/
							break;
						case "g":
							/*Code here*/
							break;
						case "h":
							/*Code here*/
							break;
						case "i":
							/*Code here*/
							break;
						default:
							break;
						}
					}
					
				}
			}catch (NullPointerException | NumberFormatException ex) {
				
			}
			
		}
	}
	
	public static ItemStack getItemStack(Material type, byte meta, int amount, String displayName, List<String> lore) {
		
		ItemStack is = new ItemStack(type, amount, meta);
		ItemMeta isMeta = is.getItemMeta();
		isMeta.setDisplayName(displayName);
		isMeta.setLore(lore);
		
		is.setItemMeta(isMeta);
		
		return is;
		
	}

}
